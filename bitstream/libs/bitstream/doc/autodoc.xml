<?xml version="1.0" standalone="yes"?>
<library-reference id="boost_bitstream_c___reference"><title>Boost.Bitstream C++ Reference</title><header name="boost/bitstream/bstream.hpp"><para>Bit-stream classes. </para><para>This header file contains the bit-stream classes. <para>Copyright (C) 2013 Paul Long. </para>
<note><para>Use, modification, and distribution is subject to the Boost Software License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at <ulink url="http://www.boost.org/LICENSE_1_0.txt">http://www.boost.org/LICENSE_1_0.txt</ulink>) </para></note>
<para><emphasis role="bold">See Also:</emphasis><para><ulink url="http://www.boost.org/">http://www.boost.org/</ulink> for latest version. </para><para><ulink url="http://www.boost.org/libs/bitstream">http://www.boost.org/libs/bitstream</ulink> for documentation. </para></para>
</para><namespace name="boost"><namespace name="bitstream"><class name="ibitstream"><inherit access="public">istream</inherit><description><para>This class provides an interface to manipulate bits as an input stream.</para><para><note><para>This class is based on but does not inherit from the standard class, istringstream. The main difference is that this class provides access to bits whereas istringstream provides access to characters. </para></note>
</para></description><method-group name="public member functions"><method name="rdbuf" cv="const"><type><classname>bitbuf</classname> *</type><description><para>Get the bitbuf object associated with the stream upon construction.</para><para>
</para></description><returns><para>A pointer to the bitbuf object associated with the stream. </para></returns></method><method name="data" cv="const"><type>const char *</type><description><para>Get pointer to current contents of the stream.</para><para><note><para>This is analogous to istringstream::str().</para></note>

</para></description><returns><para>Pointer to stream buffer. </para></returns></method></method-group><constructor specifiers="explicit"><parameter name="which"><paramtype>std::ios_base::openmode</paramtype><default>std::ios_base::in</default><description><para>Open mode. </para></description></parameter><description><para>Constructor.</para><para>
</para></description></constructor><constructor specifiers="explicit"><parameter name="buffer"><paramtype>const char *</paramtype><description><para>Pointer to char array to be accessed. </para></description></parameter><parameter name="size"><paramtype>std::streamsize</paramtype><default>INT_MAX</default><description><para>Number of accessible bits in char array. </para></description></parameter><parameter name="which"><paramtype>std::ios_base::openmode</paramtype><default>std::ios_base::in</default><description><para>Open mode. </para></description></parameter><description><para>Constructor.</para><para>
</para></description></constructor></class><class name="obitstream"><inherit access="public">ostream</inherit><description><para>This class provides an interface to manipulate bits as an output stream.</para><para><note><para>This class is based on but does not inherit from the standard class, ostringstream. The main difference is that this class provides access to bits whereas ostringstream provides access to characters. </para></note>
</para></description><method-group name="public member functions"><method name="rdbuf" cv="const"><type><classname>bitbuf</classname> *</type><description><para>Get the bitbuf object associated with the stream upon construction.</para><para>
</para></description><returns><para>A pointer to the bitbuf object associated with the stream. </para></returns></method><method name="data" cv="const"><type>const char *</type><description><para>Get pointer to current contents of the stream.</para><para><note><para>This is analogous to ostringstream::str().</para></note>

</para></description><returns><para>Pointer to stream buffer. </para></returns></method></method-group><constructor specifiers="explicit"><parameter name="which"><paramtype>std::ios_base::openmode</paramtype><default>std::ios_base::in</default><description><para>Open mode. </para></description></parameter><description><para>Constructor.</para><para>
</para></description></constructor><constructor specifiers="explicit"><parameter name="buffer"><paramtype>const char *</paramtype><description><para>Pointer to char array to be accessed. </para></description></parameter><parameter name="size"><paramtype>std::streamsize</paramtype><default>INT_MAX</default><description><para>Number of accessible bits in char array. </para></description></parameter><parameter name="which"><paramtype>std::ios_base::openmode</paramtype><default>std::ios_base::in</default><description><para>Open mode. </para></description></parameter><description><para>Constructor.</para><para>
</para></description></constructor></class></namespace></namespace></header><header name="boost/bitstream/ibstream.hpp"><para>This file provides the basic stream classes. </para><para>This file provides details about the basic stream classes. </para><namespace name="boost"><namespace name="bitstream"><class name="ibstream"><inherit access="public">boost::bitstream::iob</inherit><method name="operator&gt;&gt;" cv=""><type>friend <classname>ibstream</classname> &amp;</type><template>
          <template-type-parameter name="T"/>
        </template><parameter name="ibs"><paramtype><classname>ibstream</classname> &amp;</paramtype><description><para>Reference to ibstream on left-hand side of operator. </para></description></parameter><parameter name="b"><paramtype>const T &amp;</paramtype><description><para>Integral on right-hand side of operator. </para></description></parameter><purpose>Friend const functions for access to badbit(). </purpose><description><para>Get bit field from input stream that must be equal to integral value.</para><para>

</para></description><returns><para>Reference to ibstream parameter. </para></returns></method><method name="operator&gt;&gt;" cv=""><type>friend <classname>ibstream</classname> &amp;</type><template>
          <template-nontype-parameter name="N"><type>size_t</type></template-nontype-parameter>
        </template><parameter name="ibs"><paramtype><classname>ibstream</classname> &amp;</paramtype><description><para>Reference to ibstream on left-hand side of operator. </para></description></parameter><parameter name="bs"><paramtype>const std::bitset&lt; N &gt; &amp;</paramtype><description><para>bitset on right-hand side of operator. </para></description></parameter><description><para>Get bits from input stream that must be equal to bitset value.</para><para>

</para></description><returns><para>Reference to ibstream parameter. </para></returns></method><method name="operator&gt;&gt;" cv=""><type>friend <classname>ibstream</classname> &amp;</type><parameter name="ibs"><paramtype><classname>ibstream</classname> &amp;</paramtype><description><para>Reference to ibstream on left-hand side of operator. </para></description></parameter><parameter name="b"><paramtype>const bool &amp;</paramtype><description><para>bool on right-hand side of operator. </para></description></parameter><description><para>Get single bit from input stream that must be equal to bool.</para><para>

</para></description><returns><para>Reference to ibstream parameter. </para></returns></method><method-group name="public member functions"><method name="gcount" cv="const"><type>std::streamsize</type><purpose>Get number of bits extracted by last input operation. </purpose></method><method name="gvalue" cv="const"><type>bitfield</type><description><para>Get value extracted by last input operation.</para><para><note><para>The value returned by this function is only valid if gcount() returns a value greater than zero.</para></note>

</para></description><returns><para>Most recent extracted value. </para></returns></method><method name="get" cv=""><type>bitfield</type><description><para>Get one bit from stream.</para><para>
</para></description><returns><para>Next bit from stream. </para></returns></method><method name="ignore" cv=""><type><classname>ibstream</classname> &amp;</type><parameter name="bits"><paramtype>std::streamsize</paramtype><default>1</default><description><para>Number of bits to ignore. </para></description></parameter><description><para>Ignore, or skip over, bits in stream.</para><para>

</para></description><returns><para>This bit stream. </para></returns></method><method name="aligng" cv=""><type><classname>ibstream</classname> &amp;</type><parameter name="bit"><paramtype>size_t</paramtype><description><para>Bit multiple, such as 8 for byte alignment. </para></description></parameter><description><para>Align get pointer to next bit multiple if not already at one.</para><para>

</para></description><returns><para>This bit stream. </para></returns></method><method name="repeat" cv=""><type><classname>ibstream</classname> &amp;</type><parameter name="repeat"><paramtype>size_t</paramtype><description><para>Number of bit fields to extract to each subsequent vector. </para></description></parameter><description><para>Set repeat count for subsequent vector extractions.</para><para><note><para>This function does not extract anything from ibstream. It merely saves a value that any subsequent vector extractions use to know how many bit fields to extract into the same number of vector elements.</para></note>


</para></description><returns><para>This bit stream. </para></returns></method><method name="alignedg" cv=""><type>bool</type><parameter name="bit"><paramtype>size_t</paramtype><description><para>Bit multiple, such as 8 for byte alignment. </para></description></parameter><description><para>Determine whether get pointer is aligned to bit multiple.</para><para>Example: <programlisting>static const bitset&lt;2&gt; version(0x2);
bitset&lt;4&gt; csrcCount;
bool marker;
bitset&lt;7&gt; payloadType;
DWORD timestamp, ssrcIdentifier;
ibitstream bin(rtpHeader);
bin &gt;&gt; version &gt;&gt; aligng(4) &gt;&gt; csrcCount;
assert(bin.alignedg(8));
// (aligng is redundant here because already at byte alignment)
bin &gt;&gt; aligng(8) &gt;&gt; marker &gt;&gt; payloadType;
bin &gt;&gt; timestamp &gt;&gt; ssrcIdentifier;
</programlisting></para><para>

</para></description><returns><para>Whether get pointer is bit-multiple aligned. </para></returns></method><method name="peek" cv=""><type>bitfield</type><description><para>Get next bit from stream without advancing get pointer.</para><para>
</para></description><returns><para>Next bit from stream. </para></returns></method><method name="read" cv=""><type><classname>ibstream</classname> &amp;</type><parameter name="value"><paramtype>bitfield &amp;</paramtype></parameter><parameter name="bits"><paramtype>std::streamsize</paramtype><description><para>Number of bits to read. </para></description></parameter><description><para>Get bits from stream.</para><para><note><para>Unlike get(), this function returns the bit value in an integral, not a bitset.</para></note>


</para></description><returns><para>This bit stream. </para></returns></method><method name="readsome" cv=""><type><classname>ibstream</classname> &amp;</type><parameter name="value"><paramtype>bitfield &amp;</paramtype></parameter><parameter name="bits"><paramtype>std::streamsize</paramtype><description><para>Number of bits to read. </para></description></parameter><description><para>Get "some" bits from stream.</para><para><note><para>This function is provided for completeness. A bit stream residing in memory does not possess the behavior that, unlike istringstream, would make readsome() behave any different from read().</para></note>


</para></description><returns><para>This bit stream. </para></returns></method><method name="seekg" cv=""><type><classname>ibstream</classname> &amp;</type><parameter name="offset"><paramtype>std::streamoff</paramtype><description><para>Relative offset from indicated pointer. </para></description></parameter><parameter name="dir"><paramtype>std::ios_base::seek_dir</paramtype><description><para>Bit pointer to which offset is applied. </para></description></parameter><description><para>Set position of get pointer relative to indicated internal pointer.</para><para>

</para></description><returns><para>This bit stream. </para></returns></method><method name="seekg" cv=""><type><classname>ibstream</classname> &amp;</type><parameter name="position"><paramtype>std::streampos</paramtype><description><para>Bit position. </para></description></parameter><description><para>Set position of get pointer.</para><para>

</para></description><returns><para>This bit stream. </para></returns></method><method name="sync" cv=""><type>int</type><description><para>Synchronize input buffer with source of bits.</para><para>
</para></description><returns><para>0 if buffered stream and successful; -1 otherwise. </para></returns></method><method name="tellg" cv=""><type>std::streampos</type><description><para>Get position of get pointer.</para><para>
</para></description><returns><para>Bit position of next bit to be read. </para></returns></method><method name="unget" cv=""><type><classname>ibstream</classname> &amp;</type><description><para>Move get pointer backwards and return bit at new position.</para><para>
</para></description><returns><para>This bit stream. </para></returns></method></method-group><constructor specifiers="explicit"><parameter name="bb"><paramtype><classname>bitbuf</classname> *</paramtype></parameter><purpose>Constructor. </purpose></constructor></class><function name="operator&gt;&gt;"><type><classname>ibstream</classname> &amp;</type><parameter name="ibs"><paramtype><classname>ibstream</classname> &amp;</paramtype><description><para>Reference to ibstream on left-hand side of operator. </para></description></parameter><parameter name="b"><paramtype>bool &amp;</paramtype><description><para>bool on right-hand side of operator. </para></description></parameter><description><para>Get single bit from input stream and place in bool.</para><para>

</para></description><returns><para>Reference to ibstream parameter. </para></returns></function><function name="operator&gt;&gt;"><type><classname>ibstream</classname> &amp;</type><parameter name="ibs"><paramtype><classname>ibstream</classname> &amp;</paramtype><description><para>Reference to ibstream on left-hand side of operator. </para></description></parameter><parameter name="b"><paramtype>const bool &amp;</paramtype><description><para>bool on right-hand side of operator. </para></description></parameter><description><para>Get single bit from input stream that must be equal to bool.</para><para>

</para></description><returns><para>Reference to ibstream parameter. </para></returns></function><function name="operator&gt;&gt;"><type><classname>ibstream</classname> &amp;</type><template>
          <template-type-parameter name="T"/>
        </template><parameter name="ibs"><paramtype><classname>ibstream</classname> &amp;</paramtype><description><para>Reference to ibstream on left-hand side of operator. </para></description></parameter><parameter name="b"><paramtype>T &amp;</paramtype><description><para>Integral on right-hand side of operator. </para></description></parameter><description><para>Get bit field from input stream and place in integral.</para><para>

</para></description><returns><para>Reference to ibstream parameter. </para></returns></function><function name="operator&gt;&gt;"><type><classname>ibstream</classname> &amp;</type><template>
          <template-type-parameter name="T"/>
        </template><parameter name="ibs"><paramtype><classname>ibstream</classname> &amp;</paramtype><description><para>Reference to ibstream on left-hand side of operator. </para></description></parameter><parameter name="b"><paramtype>const T &amp;</paramtype><description><para>Integral on right-hand side of operator. </para></description></parameter><description><para>Get bit field from input stream that must be equal to integral value.</para><para>

</para></description><returns><para>Reference to ibstream parameter. </para></returns></function><function name="operator&gt;&gt;"><type><classname>ibstream</classname> &amp;</type><template>
          <template-type-parameter name="T"/>
        </template><parameter name="ibs"><paramtype><classname>ibstream</classname> &amp;</paramtype><description><para>Reference to ibstream on left-hand side of operator. </para></description></parameter><parameter name="v"><paramtype>std::vector&lt; T &gt; &amp;</paramtype><description><para>Integral vector on right-hand side of operator. </para></description></parameter><description><para>Get bit fields from input stream and place in integral vector.</para><para><note><para>Starting with the first element, this function populates existing elements in the vector with bit fields sequentially extracted from the input stream. It does not increase the size of the vector, e.g., with push_back(), because it relies on the existing size of the vector to know how many bit fields to extract.</para></note>


</para></description><returns><para>Reference to ibstream parameter. </para></returns></function><function name="operator&gt;&gt;"><type><classname>ibstream</classname> &amp;</type><template>
          <template-type-parameter name="T"/>
        </template><parameter name="ibs"><paramtype><classname>ibstream</classname> &amp;</paramtype><description><para>Reference to ibstream on left-hand side of operator. </para></description></parameter><parameter name="v"><paramtype>std::vector&lt; const T &gt; &amp;</paramtype><description><para>Integral vector on right-hand side of operator. </para></description></parameter><description><para>Get bit fields from input stream that must be equal to elements in integral vector.</para><para><para><emphasis role="bold">See Also:</emphasis><para>Size note for non-const version of this function.</para></para>


</para></description><returns><para>Reference to ibstream parameter. </para></returns></function><function name="operator&gt;&gt;"><type><classname>ibstream</classname> &amp;</type><template>
          <template-nontype-parameter name="N"><type>size_t</type></template-nontype-parameter>
        </template><parameter name="ibs"><paramtype><classname>ibstream</classname> &amp;</paramtype><description><para>Reference to ibstream on left-hand side of operator. </para></description></parameter><parameter name="bs"><paramtype>std::bitset&lt; N &gt; &amp;</paramtype><description><para>bitset on right-hand side of operator. </para></description></parameter><description><para>Get bits from input stream and place in bitset.</para><para>

</para></description><returns><para>Reference to ibstream parameter. </para></returns></function><function name="operator&gt;&gt;"><type><classname>ibstream</classname> &amp;</type><template>
          <template-nontype-parameter name="N"><type>size_t</type></template-nontype-parameter>
        </template><parameter name="ibs"><paramtype><classname>ibstream</classname> &amp;</paramtype><description><para>Reference to ibstream on left-hand side of operator. </para></description></parameter><parameter name="bs"><paramtype>const std::bitset&lt; N &gt; &amp;</paramtype><description><para>bitset on right-hand side of operator. </para></description></parameter><description><para>Get bits from input stream that must be equal to bitset value.</para><para>

</para></description><returns><para>Reference to ibstream parameter. </para></returns></function></namespace></namespace></header><header name="boost/bitstream/iob.hpp"><para>Base classes and types for bit streams. </para><para>This header file contains base classes and types for the bit-stream hierarchy of classes.</para><para>parametric manipulators for bit streams. <para>Copyright (C) 2013 Paul Long. </para>
<note><para>Use, modification, and distribution is subject to the Boost Software License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at <ulink url="http://www.boost.org/LICENSE_1_0.txt">http://www.boost.org/LICENSE_1_0.txt</ulink>) </para></note>
<para><emphasis role="bold">See Also:</emphasis><para><ulink url="http://www.boost.org/">http://www.boost.org/</ulink> for latest version. </para><para><ulink url="http://www.boost.org/libs/bitstream">http://www.boost.org/libs/bitstream</ulink> for documentation. </para></para>
</para><namespace name="boost"><namespace name="bitstream"><class name="bitbuf"><description><para>This class represents contiguous memory, accessed as a sequence of bit fields.</para><para><note><para>This class is based on but does not inherit from the standard class, stringbuf. The main difference is that this class provides access to bits whereas stringbuf provides access to characters.</para><para>Currently, this class can only be used to read bits from a buffer; however, it could be easily be fleshed out for writing bits, too. </para></note>
</para></description><data-member name="npos" specifiers="static"><type>const int</type><description><para>Represents both an unbounded number of bits and an attempt to move past bit-stream bounds.</para><para><note><para>A consumer might encounter this value where member functions of this class return a value of streamsize or streampos type. </para></note>
</para></description></data-member><data-member name="eof" specifiers="static"><type>const bitfield</type><description><para>Special, end-of-file value.</para><para><note><para>This class cannot extract a bit sequence that is equal to this value. Therefore, when a member function returns this value, the consumer should knowthat the end of file has been reached. Actually, an attempt was made to either advance past the end or beginning of the accessible bits in the buffer. </para></note>
</para></description></data-member><method-group name="public member functions"><method name="data" cv="const"><type>const char *</type><description><para>Get pointer to char-array stream buffer.</para><para><note><para>This is analogous to stringbuf::str().</para></note>
<xrefsect id="todo_1_todo000001"><xreftitle>Todo</xreftitle><xrefdescription><para>Should this return const?</para></xrefdescription></xrefsect></para><para>
</para></description><returns><para>Pointer to stream buffer. </para></returns></method><method name="data" cv=""><type>void</type><parameter name="buffer"><paramtype>const char *</paramtype></parameter><description><para>Set pointer to char-array stream buffer.</para><para><note><para>This is analogous to stringbuf::str(x).</para></note>
<xrefsect id="todo_1_todo000002"><xreftitle>Todo</xreftitle><xrefdescription><para>Assure various pointers, etc. are reset to reflect a new pointer. </para></xrefdescription></xrefsect></para></description></method><method name="in_avail" cv="const"><type>std::streamsize</type><description><para>Number of bits currently available to read.</para><para>
</para></description><returns><para>Number of readable bits. </para></returns></method><method name="pubseekoff" cv=""><type>std::streampos</type><parameter name="offset"><paramtype>std::streamoff</paramtype><description><para>Signed offset from current position for new position. </para></description></parameter><parameter name="way"><paramtype>std::ios_base::seekdir</paramtype><description><para>From which pointer offset is applied for new position. </para></description></parameter><description><para>Reposition get-next-bit pointer relative to current position.</para><para>

</para></description><returns><para>Position after offset applied. </para></returns></method><method name="pubseekpos" cv=""><type>std::streampos</type><parameter name="position"><paramtype>std::streampos</paramtype><description><para>New bit position. </para></description></parameter><description><para>Reposition get-next-bit pointer.</para><para>

</para></description><returns><para>Position after repositioning. </para></returns></method><method name="pubsetbuf" cv=""><type><classname>bitbuf</classname> *</type><parameter name="buffer"><paramtype>unsigned char *</paramtype><description><para>Pointer to char array to be accessed. </para></description></parameter><description><para>Set buffer to access.</para><para>

</para></description><returns><para>Pointer to this object; NULL if error. </para></returns></method><method name="pubsetbuf" cv=""><type><classname>bitbuf</classname> *</type><parameter name="buffer"><paramtype>unsigned char *</paramtype><description><para>Pointer to char array to be accessed. </para></description></parameter><parameter name="size"><paramtype>std::streamsize</paramtype><description><para>Number of accessible bits in char array. </para></description></parameter><parameter name="position"><paramtype>std::streampos</paramtype><default>0</default><description><para>Offset of first accessible bit in char array. </para></description></parameter><description><para>Set buffer to access.</para><para>

</para></description><returns><para>Pointer to this object; NULL if error. </para></returns></method><method name="pubsync" cv=""><type>int</type><description><para>Synchronize stream buffer with input or output device.</para><para>
</para></description><returns><para>0 if buffered stream and successful; -1 otherwise. </para></returns></method><method name="sbumpb" cv=""><type>bool</type><parameter name="value"><paramtype>bitfield &amp;</paramtype><description><para>Current bit before advancing pointer. </para></description></parameter><description><para>Get current bit and advance get pointer.</para><para>

</para></description><returns><para>Whether okay - eof has not been encountered. </para></returns></method><method name="sgetb" cv=""><type>bool</type><parameter name="value"><paramtype>bitfield &amp;</paramtype><description><para>Current bit. </para></description></parameter><description><para>Get current bit at get pointer.</para><para>

</para></description><returns><para>Whether okay - eof has not been encountered. </para></returns></method><method name="sgetn" cv=""><type>std::streamsize</type><parameter name="value"><paramtype>bitfield &amp;</paramtype><description><para>Value of bit field. </para></description></parameter><parameter name="size"><paramtype>std::streamsize</paramtype><description><para>Number of bits in sequence of bits. </para></description></parameter><description><para>Get sequence of bits.</para><para>

</para></description><returns><para>Number of bits read from buffer or zero if error or eof. </para></returns></method><method name="snextb" cv=""><type>bool</type><parameter name="value"><paramtype>bitfield &amp;</paramtype><description><para>Next bit. </para></description></parameter><description><para>Advance get pointer and return next bit.</para><para>

</para></description><returns><para>Whether okay - eof has not been encountered. </para></returns></method><method name="sungetb" cv=""><type>bool</type><parameter name="value"><paramtype>bitfield &amp;</paramtype><description><para>Bit before position prior to call. </para></description></parameter><description><para>Move get pointer backwards and return bit at new position.</para><para>

</para></description><returns><para>Whether okay - eof has not been encountered. </para></returns></method></method-group><constructor specifiers="explicit"><parameter name="which"><paramtype>std::ios_base::openmode</paramtype><default>std::ios_base::in|std::ios_base::out</default><description><para>Open mode. </para></description></parameter><description><para>Constructor.</para><para>
</para></description></constructor><constructor><parameter name="buffer"><paramtype>const char *</paramtype><description><para>Pointer to char array to be accessed. </para></description></parameter><parameter name="size"><paramtype>std::streamsize</paramtype><default>INT_MAX</default><description><para>Number of accessible bits in char array. </para></description></parameter><parameter name="which"><paramtype>std::ios_base::openmode</paramtype><default>std::ios_base::in|std::ios_base::out</default><description><para>Open mode. </para></description></parameter><description><para>Constructor.</para><para>
</para></description></constructor><method-group name="protected member functions"><method name="gptr" cv="const"><type>std::streampos</type><description><para>Returns bit position within accessible input sequence of next bit to be read.</para><para><note><para>The "get pointer."</para></note>

</para></description><returns><para>Next bit position. </para></returns></method><method name="egptr" cv="const"><type>std::streampos</type><description><para>Returns bit position just past last bit in accessible input sequence.</para><para>
</para></description><returns><para>Position after last bit. </para></returns></method><method name="eback" cv="const"><type>std::streampos</type><description><para>Returns first bit position in accessible input sequence.</para><para>
</para></description><returns><para>Position of first bit. </para></returns></method><method name="setg" cv=""><type>void</type><parameter name="buffer"><paramtype>unsigned char *</paramtype><description><para>Pointer to char array to be accessed. </para></description></parameter><parameter name="gbeg"><paramtype>std::streampos</paramtype><description><para>Position of first accessible bit in char array. </para></description></parameter><parameter name="gnext"><paramtype>std::streampos</paramtype><description><para>Position of next bit to read. </para></description></parameter><parameter name="gend"><paramtype>std::streampos</paramtype><description><para>Position of bit immediately after last accessible bit in char array. </para></description></parameter><description><para>Set pointer and offsets that define boundaries of and position within accessible input sequence.</para><para>
</para></description></method><method name="gbump" cv=""><type>void</type><parameter name="offset"><paramtype>std::streamoff</paramtype><description><para>Value by which to increase the get pointer. </para></description></parameter><description><para>Advances the get pointer by specified number of bit positions.</para><para>
</para></description></method><method name="seekpos" cv=""><type>std::streampos</type><parameter name="position"><paramtype>std::streampos</paramtype><description><para>New absolute position for get pointer. </para></description></parameter><description><para>Set get pointer to absolute position.</para><para>

</para></description><returns><para>New position after get pointer modified or npos if error. </para></returns></method><method name="seekoff" cv=""><type>std::streampos</type><parameter name="offset"><paramtype>std::streamoff</paramtype><description><para>Amount by which get pointer is adjusted. </para></description></parameter><parameter name="way"><paramtype>std::ios_base::seekdir</paramtype><description><para>From which pointer offset is applied for new position. </para></description></parameter><description><para>Set get pointer relative to current position.</para><para>

</para></description><returns><para>New position after get pointer modified. </para></returns></method><method name="assure_valid_get_pointer" cv=""><type>std::streampos</type><parameter name="position"><paramtype>std::streampos</paramtype><description><para>Candidate for new current position, or get pointer. </para></description></parameter><description><para>Assure that position is within bounds of accessible input sequence.</para><para>If bit position is within bounds, use as internal get pointer and return it; otherwise, return npos.</para><para>
</para></description></method><method name="setbuf" cv=""><type><classname>bitbuf</classname> *</type><parameter name="buffer"><paramtype>unsigned char *</paramtype><description><para>Pointer to char array containing bits to access. </para></description></parameter><parameter name="size"><paramtype>std::streamsize</paramtype><description><para>Number of accessible bits in char array. </para></description></parameter><parameter name="position"><paramtype>std::streampos</paramtype><description><para>Offset of first accessible bit in char array. </para></description></parameter><description><para>Set buffer to access.</para><para>

</para></description><returns><para>Pointer to this object; NULL if error. </para></returns></method><method name="sync" cv=""><type>int</type><description><para>Synchronize stream buffer with input or output device.</para><para><note><para>Since we do not currently have an I/O device with which to synchronize - we are unbuffered - this function always returns in error with -1.</para></note>

</para></description><returns><para>0 if buffered stream and successful; -1 otherwise. </para></returns></method><method name="xsgetn" cv=""><type>std::streamsize</type><parameter name="value"><paramtype>bitfield &amp;</paramtype><description><para>Value of bit field. </para></description></parameter><parameter name="size"><paramtype>std::streamsize</paramtype><description><para>Number of bits in sequence of bits. </para></description></parameter><description><para>Get sequence of bits.</para><para>

</para></description><returns><para>Number of bits read from buffer or zero if error or eof. </para></returns></method></method-group><method-group name="private member functions"><method name="current_byte" cv="const"><type>unsigned char *</type><description><para>Get pointer to current byte.</para><para>
</para></description><returns><para>Pointer to byte containing current bit position (the next bit to read). </para></returns></method></method-group></class><class name="iob"><description><para>Base class for all bit-stream classes. </para></description><method-group name="public member functions"><method name="conversion-operator" cv="const"><type>void *</type><description><para>Evaluate stream object for success.</para><para>This function returns null if the internal failbit or badbit are set for this stream; otherwise, it returns a non-zero pointer.</para><para>
</para></description><returns><para>Whether 0 if failbit or badbit are set; non-zero otherwise. </para></returns></method><method name="good" cv="const"><type>bool</type><description><para>Check if bitstream is good for continued operation.</para><para>
</para></description><returns><para>Whether any of the error flags are set. </para></returns></method><method name="eof" cv="const"><type>bool</type><description><para>Check if error flag, eofbit, is set.</para><para><note><para>eofbit is set when an operation attempts to access a bit position outside of the bit stream, e.g., reading past end of bitstream.</para></note>

</para></description><returns><para>Whether previous input operation set eofbit. </para></returns></method><method name="fail" cv="const"><type>bool</type><description><para>Check if either error flag, failbit or badbit, is set.</para><para><note><para>failbit is set when there is an error with the internal logic of an operation.</para></note>
<para><emphasis role="bold">See Also:</emphasis><para>Note for bad().</para></para>

</para></description><returns><para>Whether previous input operation set failbit or badbit. </para></returns></method><method name="bad" cv="const"><type>bool</type><description><para>Check if error flag, badbit, is set.</para><para><note><para>badbit is set if the integrity of the stream is lost, e.g., encountered unexpected value.</para></note>

</para></description><returns><para>Whether previous input operation set badbit. </para></returns></method><method name="operator!" cv="const"><type>bool</type><description><para>Evaluate stream object for failure.</para><para>This function returns whether the internal failbit or badbit has been set for this ibitstream.</para><para><note><para>Same as calling fail(). bin.fail() is the same as !bin.</para></note>

</para></description><returns><para>Whether the failbit or badbit has been set. </para></returns></method><method name="conversion-operator" cv="const"><type>bool</type><description><para>Evaluate stream object for success.</para><para>This function returns whether the internal failbit and badbit are not set for this ibitstream.</para><para><note><para>Same as calling !fail(). !bin.fail() is the same as bin.</para></note>

</para></description><returns><para>Whether the failbit and badbit are not set. </para></returns></method><method name="rdstate" cv="const"><type>std::ios_base::iostate</type><description><para>Get error state flags.</para><para>
</para></description><returns><para>Error state flags. </para></returns></method><method name="setstate" cv=""><type>void</type><parameter name="state"><paramtype>std::ios_base::iostate</paramtype><description><para>Error state flags. </para></description></parameter><description><para>Set error state flags.</para><para><note><para>This function sets states additively - no state is cleared.</para></note>

</para></description></method><method name="clear" cv=""><type>void</type><parameter name="state"><paramtype>std::ios_base::iostate</paramtype><default>std::ios_base::goodbit</default><description><para>Error state flags. </para></description></parameter><description><para>Set error state flags.</para><para>
</para></description></method><method name="rdbuf" cv="const"><type><classname>bitbuf</classname> *</type><description><para>Get the bitbuf object currently associated with the stream.</para><para>
</para></description><returns><para>A pointer to the bitbuf object associated with the stream. </para></returns></method><method name="rdbuf" cv=""><type><classname>bitbuf</classname> *</type><parameter name="bb"><paramtype><classname>bitbuf</classname> *</paramtype></parameter><description><para>Set the bitbuf object associated with the stream.</para><para>
</para></description><returns><para>A pointer to the bitbuf object previously associated with the stream. </para></returns></method></method-group><constructor specifiers="explicit"><parameter name="bb"><paramtype><classname>bitbuf</classname> *</paramtype><description><para>Pointer to a bitbuf object. </para></description></parameter><description><para>Constructor.</para><para>
</para></description></constructor><destructor><description><para>Destructor. </para></description></destructor><method-group name="protected member functions"><method name="init" cv=""><type>void</type><parameter name="bb"><paramtype><classname>bitbuf</classname> *</paramtype><description><para>Pointer to a bitbuf object. </para></description></parameter><description><para>Initialize member variables.</para><para>
</para></description></method><method name="badbit" cv=""><type>void</type><description><para>Set badbit error flag. </para></description></method><method name="failbit" cv=""><type>void</type><description><para>Set failbit error flag. </para></description></method><method name="eofbit" cv=""><type>void</type><description><para>Set eofbit error flag. </para></description></method></method-group><constructor/></class><data-member name="bitfield"><type>decltype(std::bitset&lt; 0 &gt;().to_ulong()) typedef</type><description><para>Integral type for bit-field values. </para></description></data-member></namespace></namespace></header><header name="boost/bitstream/iobmanip.hpp"><namespace name="boost"><namespace name="bitstream"><class name="setrepeat"><description><para>This class represents the setrepeat bit-stream manipulator.</para><para><note><para>This is a roundabout but necessary way of implementing manipulators that take parameters, such as the setprecision() manipulator. </para></note>
</para></description><method-group name="public member functions"><method name="operator()" cv="const"><type><classname>ibstream</classname> &amp;</type><parameter name="ibs"><paramtype><classname>ibstream</classname> &amp;</paramtype><description><para>Reference to ibstream on lhs of &gt;&gt; operator. </para></description></parameter><description><para>Overload for the () operator on this class.</para><para>

</para></description><returns><para>Reference to ibstream parameter. </para></returns></method></method-group><constructor><parameter name="repeat"><paramtype>size_t</paramtype><description><para>Number of bit fields to extract to each subsequent integral container. </para></description></parameter><description><para>Constructor.</para><para>
</para></description></constructor></class><class name="ignore"><description><para>This class represents the ignore bit-stream manipulator.</para><para><para><emphasis role="bold">See Also:</emphasis><para>Implementation note for <classname alt="boost::bitstream::setrepeat">setrepeat</classname> manipulator. </para></para>
</para></description><method-group name="public member functions"><method name="operator()" cv="const"><type><classname>ibstream</classname> &amp;</type><parameter name="ibs"><paramtype><classname>ibstream</classname> &amp;</paramtype><description><para>Reference to ibstream on lhs of &gt;&gt; operator. </para></description></parameter><description><para>Overload for the () operator on this class.</para><para>

</para></description><returns><para>Reference to ibstream parameter. </para></returns></method></method-group><constructor><parameter name="bits"><paramtype>size_t</paramtype></parameter><description><para>Constructor.</para><para>
</para></description></constructor></class><class name="aligng"><description><para>This class represents the aligng bit-stream manipulator.</para><para><para><emphasis role="bold">See Also:</emphasis><para>Implementation note for <classname alt="boost::bitstream::setrepeat">setrepeat</classname> manipulator.</para></para>
Examples: <programlisting>// Advance get pointer to next nibble.
static const bitset&lt;2&gt; version(0x2);
bitset&lt;4&gt; csrcCount;
bool marker;
bitset&lt;7&gt; payloadType;
DWORD timestamp, ssrcIdentifier;
ibitstream bin(rtpHeader);
bin &gt;&gt; version &gt;&gt; aligng(4) &gt;&gt; csrcCount &gt;&gt; marker &gt;&gt; payloadType;
bin &gt;&gt; timestamp &gt;&gt; ssrcIdentifier;
</programlisting></para><para><programlisting>// Advance get pointer to next word.
bitset&lt;16&gt; sequenceNumber;
ibitstream(rtpHeader).aligng(sizeof(WORD) * CHAR_BIT) &gt;&gt; sequenceNumber;
</programlisting></para><para><programlisting>// Advance get pointer to next double word.
bool b;
static const bitset&lt;2&gt; version(0x2);
bitset&lt;4&gt; csrcCount;
bitset&lt;7&gt; payloadType;
DWORD timestamp;
ibitstream bin(rtpHeader);
bin &gt;&gt; version &gt;&gt; b &gt;&gt; b &gt;&gt; csrcCount &gt;&gt; b &gt;&gt; payloadType
    &gt;&gt; aligng(32) &gt;&gt; timeStamp;
</programlisting> </para></description><method-group name="public member functions"><method name="operator()" cv="const"><type><classname>ibstream</classname> &amp;</type><parameter name="ibs"><paramtype><classname>ibstream</classname> &amp;</paramtype><description><para>Reference to ibstream on lhs of &gt;&gt; operator. </para></description></parameter><description><para>Overload for the () operator on this class.</para><para>

</para></description><returns><para>Reference to ibstream parameter. </para></returns></method></method-group><constructor><parameter name="bits"><paramtype>size_t</paramtype><description><para>Number of bits at which to align the get pointer. </para></description></parameter><description><para>Constructor.</para><para>
</para></description></constructor></class><function name="operator&gt;&gt;"><type><classname>ibstream</classname> &amp;</type><parameter name="ibs"><paramtype><classname>ibstream</classname> &amp;</paramtype><description><para>Reference to ibstream on left-hand side of operator. </para></description></parameter><parameter name="repeat"><paramtype><classname>setrepeat</classname></paramtype><description><para>Instance of setrepeat class. </para></description></parameter><description><para>Manipulator for ibstream that sets repeat count for subsequent container extractions.</para><para>

</para></description><returns><para>Reference to ibstream parameter. </para></returns></function><function name="operator&gt;&gt;"><type><classname>ibstream</classname> &amp;</type><parameter name="ibs"><paramtype><classname>ibstream</classname> &amp;</paramtype><description><para>Reference to ibstream on left-hand side of operator. </para></description></parameter><parameter name="skip"><paramtype><classname>ignore</classname></paramtype></parameter><description><para>Manipulator for ibstream that ignores bits.</para><para>

</para></description><returns><para>Reference to ibstream parameter. </para></returns></function><function name="operator&gt;&gt;"><type><classname>ibstream</classname> &amp;</type><parameter name="ibs"><paramtype><classname>ibstream</classname> &amp;</paramtype><description><para>Reference to ibstream on left-hand side of operator. </para></description></parameter><parameter name="align"><paramtype><classname>aligng</classname></paramtype><description><para>Instance of aligng class. </para></description></parameter><description><para>Manipulator for ibstream that aligns the get pointer in the input stream.</para><para>

</para></description><returns><para>Reference to ibstream parameter. </para></returns></function></namespace></namespace></header></library-reference>
